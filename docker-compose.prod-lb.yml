version: '3.8'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: enterprise-auth-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080' # Health check port
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/proxy_params:/etc/nginx/proxy_params:ro
      - ./config/ssl:/etc/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - auth-app-1
      - auth-app-2
    networks:
      - auth-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024

  # Application Instance 1
  auth-app-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: enterprise-auth-app-1
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=3000
      - INSTANCE_ID=auth-app-1
      - DATABASE_URL=postgresql://auth_user:auth_password@postgres:5432/enterprise_auth
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
      - LOG_LEVEL=info
      - BCRYPT_ROUNDS=12
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW=900000
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      - GRACEFUL_SHUTDOWN_ENABLED=true
      - ENABLE_SESSION_AFFINITY=true
      - SESSION_STORAGE=redis
      - CACHE_STRATEGY=distributed
      - AUTO_SCALING_ENABLED=false
      - MIN_INSTANCES=2
      - MAX_INSTANCES=10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network
    volumes:
      - app-logs-1:/app/logs
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health/ready']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Application Instance 2
  auth-app-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: enterprise-auth-app-2
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=3000
      - INSTANCE_ID=auth-app-2
      - DATABASE_URL=postgresql://auth_user:auth_password@postgres:5432/enterprise_auth
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
      - LOG_LEVEL=info
      - BCRYPT_ROUNDS=12
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW=900000
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      - GRACEFUL_SHUTDOWN_ENABLED=true
      - ENABLE_SESSION_AFFINITY=true
      - SESSION_STORAGE=redis
      - CACHE_STRATEGY=distributed
      - AUTO_SCALING_ENABLED=false
      - MIN_INSTANCES=2
      - MAX_INSTANCES=10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network
    volumes:
      - app-logs-2:/app/logs
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health/ready']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # PostgreSQL database with optimized settings for production
  postgres:
    image: postgres:15-alpine
    container_name: enterprise-auth-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=enterprise_auth
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - auth-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U auth_user -d enterprise_auth']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c min_wal_size=2GB
      -c max_wal_size=8GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis cluster for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: enterprise-auth-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - auth-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: enterprise-auth-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - auth-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=10GB'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: enterprise-auth-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - auth-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

networks:
  auth-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  app-logs-1:
    driver: local
  app-logs-2:
    driver: local
  nginx-logs:
    driver: local
