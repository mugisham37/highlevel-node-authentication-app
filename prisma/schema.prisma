// Enterprise Authentication Backend - Prisma Schema
// Used for complex relational operations and administrative tasks

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // MFA Properties
  mfaEnabled  Boolean  @default(false)
  totpSecret  String?
  backupCodes String[]

  // Security Properties
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  lastLoginAt         DateTime?
  lastLoginIP         String?
  riskScore           Float     @default(0)

  // Relations
  accounts            Account[]
  sessions            Session[]
  roles               UserRole[]
  auditLogs           AuditLog[]
  webAuthnCredentials WebAuthnCredential[]
  webhooks            Webhook[]
  Webhook             Webhook[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id               String   @id @default(cuid())
  userId           String
  token            String   @unique
  refreshToken     String   @unique
  expiresAt        DateTime
  refreshExpiresAt DateTime
  createdAt        DateTime @default(now())
  lastActivity     DateTime @default(now())
  deviceInfo       Json?
  ipAddress        String?
  userAgent        String?
  riskScore        Float    @default(0)
  isActive         Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id         String   @id @default(cuid())
  name       String   @unique
  resource   String
  action     String
  conditions Json?
  createdAt  DateTime @default(now())

  roles RolePermission[]

  @@map("permissions")
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model WebAuthnCredential {
  id           String    @id @default(cuid())
  userId       String
  credentialId String    @unique
  publicKey    Bytes
  counter      BigInt
  deviceType   String?
  backedUp     Boolean   @default(false)
  transports   String[]
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webauthn_credentials")
}

model AuditLog {
  id            String   @id @default(cuid())
  userId        String?
  action        String
  resource      String?
  details       Json?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())
  correlationId String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model Webhook {
  id             String    @id @default(cuid())
  userId         String
  name           String
  description    String
  url            String
  secret         String
  events         String[]
  active         Boolean   @default(true)
  headers        Json?
  timeout        Int       @default(10000)
  retryConfig    Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastDeliveryAt DateTime?

  // Delivery statistics
  totalDeliveries      Int @default(0)
  successfulDeliveries Int @default(0)
  failedDeliveries     Int @default(0)
  averageResponseTime  Int @default(0)

  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryAttempts WebhookDeliveryAttempt[]

  @@index([userId])
  @@index([active])
  @@map("webhooks")
}

model WebhookEvent {
  id            String   @id @default(cuid())
  type          String
  data          Json
  userId        String?
  sessionId     String?
  timestamp     DateTime @default(now())
  metadata      Json?
  correlationId String?

  deliveryAttempts WebhookDeliveryAttempt[]

  @@index([type])
  @@index([userId])
  @@index([timestamp])
  @@map("webhook_events")
}

model WebhookDeliveryAttempt {
  id           String    @id @default(cuid())
  webhookId    String
  eventId      String
  attempt      Int
  status       String // 'pending', 'success', 'failed', 'timeout'
  httpStatus   Int?
  responseBody String?   @db.Text
  errorMessage String?   @db.Text
  deliveredAt  DateTime?
  nextRetryAt  DateTime?
  createdAt    DateTime  @default(now())

  webhook Webhook      @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  event   WebhookEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([eventId])
  @@index([status])
  @@index([nextRetryAt])
  @@map("webhook_delivery_attempts")
}
